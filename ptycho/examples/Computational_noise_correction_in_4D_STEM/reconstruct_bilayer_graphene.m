% ###################################################################################################
% Reconstruction of the 4D-dataset for bilayer graphene
%
% This script sets up the ptychography reconstruction for the example dataset of bilayer graphene
% generated by the supplied Jupyter notebook. Any parameter can be varried but the preset values
% were found to work reliable and yield satisfactory results.  This script may also be used as
% a template but only for GPU multisclice reconstructions, hence the debluring methods were
% only implemented to this engine yet.
%
% To run this script, either use the MATLAB command window or use the following shell commands:
% 1. matlab -nodisplay -nosplash
% 2. run path\to\this\file (without .mat ending)
% 
% or matlab -nodisplay -nosplash -r path\to\this\file.mat; exit()
%
% The current terminal window will become a MATLAB command window without starting the MATLAB GUI
% ##################################################################################################


addpath(genpath('/fold_slice/'))
import io.HDF.*

% Parameters of data generation with abTEM
dose = 4.5;
amplitude = 1;
abTEM = struct();
abTEM.material = 'Graphene';                                            % Material name
abTEM.energy = 300e3;                                                   % Acceleration voltage in V
abTEM.defocus = -20;                                                    % Defocus in agstrom
abTEM.semiangle_cutoff = 30;                                            % Semiangle of probe in mrad
abTEM.dose = dose * 1e7;                                                % Probe dose in elctron/angstrom^2
abTEM.numPointsx = 60;                                                  % # of scanning grid points in x-direction
abTEM.numPointsy = 60;                                                  % # of scanning grid points in y-direction
abTEM.step_size = 0.15;                                                 % Scanning step-size in angstrom
rbf = 26;                                                               % Radius of bright-field disk of diffraction patterns in pixels
abTEM.filename = "Computational_noise_correction_in_4D_STEM/E_300.0_df_-20dose_inf_amplitude_1.hdf5"; % Path of input 4D-STEM dataset (.hdf5 file)
abTEM.savepath = "/fold_slice/ptycho/examples/";                        % Save path for output data
extraInfo_dir = "test_reconstruction";                                  % Extra info to add at output filename

prepare_data = true;                                                    % Prepare the dataset for MATLAB. Required at first run.


% ##########################################
% Do not edit here
% ##########################################
%% Step 1: load data
scan_number = int16(dose * 10);
data_dir = abTEM.savepath;
data = hdf5_load(strcat(data_dir,abTEM.filename));
dp = data.array;
[ndpy,ndpx,npy,npx]=size(dp);
%% Step 2: go back to .../fold_slice/ptycho and pre-process data
%cd '/users/stud/haffnerm/Ptychoshelves/fold_slice/ptycho'
Np_p = [272,272]; % size of diffraction patterns used during reconstruction.
if ndpy < Np_p(1) % pad zeros
    dp=padarray(dp,[floor((Np_p(1)-ndpy)/2),floor((Np_p(2)-ndpx)/2),0,0],0,'both');
    if (((Np_p(1)-ndpy)/2) ~= floor((Np_p(1)-ndpy)/2))
        dp=padarray(dp,[1,1,0,0],0,'post');
    end
else
    dp=crop_pad(dp,Np_p);
end
dp=reshape(dp,Np_p(1),Np_p(2),[]);
Itot=mean(squeeze(sum(sum(dp,2),3))); % normalizing initial probe
voltage = abTEM.energy /(1e3);        % in keV
alpha0 = abTEM.semiangle_cutoff;      % im mrad
delta_f = abTEM.defocus;              % in angstrom                   
% addpath('/users/stud/haffnerm/Ptychoshelves/fold_slice/ptycho/utils_electron')
[~,lambda]=electronwavelength(voltage);
dk=alpha0/1e3/rbf/lambda;
%% Step 3: save CBED in a .hdf5 file (needed by Ptychoshelves)
save_dir = strcat(data_dir,num2str(scan_number),'/');
mkdir(save_dir)
roi_label = '0_Ndp_272';
saveName = strcat('data_roi',roi_label,'_dp.hdf5');
if (prepare_data)
delete(strcat(save_dir,saveName));
h5create(strcat(save_dir,saveName), '/dp', size(dp),'ChunkSize',[size(dp,1), size(dp,2), 1],'Deflate',4)
h5write(strcat(save_dir,saveName), '/dp', dp)
end

% Edit starting from here
%% Step 4: specify reconstruction parameters

%%%%%%%%%%%%%%%%%%%% data parameters %%%%%%%%%%%%%%%%%%%%
base_path = "/fold_slice/ptycho/examples/";
roi_label = '0_Ndp_272';
scan_string_format = '%01d';
Ndpx = 272;                                                 % Size of cbed in pixel
rot_ang = 0;                                                % Angle between cbed and scan coord.

scan_step_size = abTEM.step_size;                           % Scanning setp-size in angstrom
N_scan_y = abTEM.numPointsy;                                % Number of scan points in x
N_scan_x = abTEM.numPointsy;                                % Number of scan points in y

%%%%%%%%%%%%%%%%%%%% reconstruction parameters %%%%%%%%%%%%%%%%%%%%
gpu_id = 1;
Niter = 20;
Niter_save_results = 5;
Niter_plot_results = 5;

Nprobe = 3;                                                 % # of probe modes
Nlayers = 5;                                                % # of object slices
thickness = 5;                                              % Total object thickness in angstrom
delta_z = thickness / Nlayers;                              % Seperation of object layers along beam direction
variable_probe_modes = 1;                                   % # of modes for variable probe correction
grouping = 32;                                              % Group size. small -> better convergence but longer time/iteration
N_pos_corr = 10;                                            % Iteration number to start position correction. inf means no position correction
initial_probe_file = '';

%% %%%%%%%%%%%%%%%%%% initialize data parameters %%%%%%%%%%%%%%%%%%%%
p = struct();
p.   verbose_level = 2;                                     % Verbosity for standard output (0-1 for loops, 2-3 for testing and adjustments, >= 4 for debugging)
p.   use_display = Niter_plot_results< Niter;               % Global switch for display, if [] then true for verbose > 1
p.   scan_number = scan_number;                             % Multiple scan numbers for shared scans

% Geometry
p.   z = 1;                                                 % Distance from object to detector. Always 1 for electron ptycho
p.   asize = [Ndpx,Ndpx];                                   % Diffr. patt. array size
p.   ctr = [fix(Ndpx/2)+1, fix(Ndpx/2)+1];                  % Diffr. patt. center coordinates (y,x) (empty means middle of the array); e.g. [100 207;100+20 207+10];
p.   beam_source = 'electron';                              % Added by YJ for electron pty. Use relativistic corrected formula for wavelength. Also change the units on figures
p.   d_alpha = alpha0/rbf;                                  % Added by YJ. d_alpha is the pixel size in cbed (mrad). This is used to determine pixel size in electron ptycho
p.   prop_regime = 'farfield';                              % Propagation regime: nearfield, farfield (default), !! nearfield is supported only by GPU engines 
p.   focus_to_sample_distance = [];                         % Sample to focus distance, parameter to be set for nearfield ptychography, otherwise it is ignored 
p.   energy = voltage;                                      % Energy (in keV), leave empty to use spec entry mokev
p.   Nlayers = Nlayers;                                     % # of object layers

p.   affine_angle = 0;                                      % Not used by ptycho_recons at all. This allows you to define a variable for the affine matrix below and keep it in p for future record. This is used later by the affine_matrix_search.m script
affine_mat  = compose_affine_matrix(1, 0, rot_ang, 0);
p.   affine_matrix = affine_mat ;                           % Applies affine transformation (e.g. rotation, stretching) to the positions (ignore by = []). Convention [yn;xn] = M*[y;x].

% Scan meta data
p.   src_metadata = 'none';                                 % Source of the meta data, following options are supported: 'spec', 'none' , 'artificial' - or add new to +scan/+meta/
p.   queue.lockfile = false;                                % If true writes a lock file, if lock file exists skips recontruction

% Data preparation
p.   detector.name = 'empad';                               % See +detectors/ folder 
p.   detector.check_2_detpos = [];                          % = []; (ignores)   = 270; compares to dettrx to see if p.ctr should be reversed (for OMNY shared scans 1221122), make equal to the middle point of dettrx between the 2 detector positions
p.   detector.data_prefix = '';                             % Default using current eaccount e.g. e14169_1_
p.   detector.binning = false;                              % = true to perform 2x2 binning of detector pixels, for binning = N do 2^Nx2^N binning
p.   detector.upsampling = false;                           % Upsample the measured data by 2^data_upsampling, (transposed operator to the binning), it can be used for superresolution in nearfield ptychography or to account for undersampling in a far-field dataset
p.   detector.burst_frames = 1;                             % Number of frames collected per scan position

p.   prepare.data_preparator = 'matlab_aps';                % Data preparator; 'python' or 'matlab' or 'matlab_aps'
p.   prepare.auto_prepare_data = true;                      % If true: prepare dataset from raw measurements if the prepared data does not exist
p.   prepare.force_preparation_data = true;                 % Prepare dataset even if it exists, it will overwrite the file % Default: @prepare_data_2d
p.   prepare.store_prepared_data = false;                   % Store the loaded data to h5 even for non-external engines (i.e. other than c_solver)
p.   prepare.prepare_data_function = '';                    % (used only if data should be prepared) custom data preparation function handle;
p.   prepare.auto_center_data = false;                      % If matlab data preparator is used, try to automatically center the diffraction pattern to keep center of mass in center of diffraction

% Scan positions
p.   src_positions = 'matlab_pos';                          % 'spec', 'orchestra', 'load_from_file', 'matlab_pos' (scan params are defined below) or add new position loaders to +scan/+positions/
p.   positions_file = '';                                   % Filename pattern for position files, Example: ['../../specES1/scan_positions/scan_%05d.dat']; (the scan number will be automatically filled in)
% scan parameters for option src_positions = 'matlab_pos';
p.   scan.type = 'raster';                                  % {'round', 'raster', 'round_roi', 'custom'}
p.   scan.roi_label = roi_label;                            % For APS data
p.   scan.format = scan_string_format;                      % For APS data format for scan directory generation
p.   scan.radius_in = 0;                                    % Round scan: interior radius of the round scan
p.   scan.radius_out = 5e-6;                                % Round scan: exterior radius of the round scan
p.   scan.nr = 10;                                          % Round scan: number of intervals (# of shells - 1)
p.   scan.nth = 3;                                          % Round scan: number of points in the first shell
p.   scan.lx = 20e-6;                                       % Round_roi scan: width of the roi
p.   scan.ly = 20e-6;                                       % Round_roi scan: height of the roi
p.   scan.dr = 1.5e-6;                                      % Round_roi scan: shell step size
p.   scan.nx = abTEM.numPointsx;                            % Raster scan: number of steps in x
p.   scan.ny = abTEM.numPointsy;                            % Raster scan: number of steps in y
p.   scan.step_size_x = scan_step_size;                     % Raster scan: step size (grid spacing)
p.   scan.step_size_y = scan_step_size;                     % Raster scan: step size (grid spacing)
p.   scan.custom_flip = [1,1,1];                            % Raster scan: apply custom flip [fliplr, flipud, transpose] to positions- similar to eng.custom_data_flip in GPU engines. Added by ZC.
p.   scan.step_randn_offset = 0;                            % Raster scan: relative random offset from the ideal periodic grid to avoid the raster grid pathology 
p.   scan.b = 0;                                            % Fermat: angular offset
p.   scan.n_max = 1e4;                                      % Fermat: maximal number of points generated 
p.   scan.step = 0.2;                                       % Fermat: step size 
p.   scan.cenxy = [0,0];                                    % Fermat: position of center offset 
p.   scan.roi = [];                                         % Region of interest in the object [xmin xmax ymin ymax] in meters. Points outside this region are not used for reconstruction.
                                                            % (relative to upper corner for raster scans and to center for round scans)    
                                                            % Custom: a string name of a function that defines the positions; also accepts mat file with entry 'pos', see +scans/+positions/+mat_pos.m
p.   scan.custom_positions_source = '';
p.   scan.custom_params = [];                               % Custom: the parameters to feed to the custom position function.

% Detector
p.binning = false;
p.detector.binning = false;
p.avg_photon_threshold = 0;

% I/O
p.   prefix = '';                                           % For automatic output filenames. If empty: scan number
p.   suffix = strcat('ML_recon');                           % Optional suffix for reconstruction 
p.   scan_string_format = scan_string_format;               % Format for scan string generation, it is used e.g for plotting and data saving 

p.   base_path = base_path;                                 % base path : used for automatic generation of other paths 
p.   specfile = '';                                         % Name of spec file to get motor positions and check end of scan, defaut is p.spec_file == p.base_path;
p.   ptycho_matlab_path = '/fold_slice/ptycho';             % cSAXS ptycho package path
p.   cSAXS_matlab_path = '/fold_slice';                     % cSAXS base package path
p.   raw_data_path{1} = '';                                 % Default using compile_x12sa_filename, used only if data should be prepared automatically
p.   prepare_data_path = '';                                % Default: base_path + 'analysis'. Other example: '/afs/psi.ch/project/CDI/cSAXS_project/analysis2/'; also supports %u to insert the scan number at a later point (e.g. '/afs/psi.ch/project/CDI/cSAXS_project/analysis2/S%.5u')
p.   prepare_data_filename = [];                            % Leave empty for default file name generation, otherwise use [sprintf('S%05d_data_%03dx%03d',p.scan_number(1), p.asize(1), p.asize(2)) p.prep_data_suffix '.h5'] as default 
p.   save_path{1} = '';                                     % Default: base_path + 'analysis'. Other example: '/afs/psi.ch/project/CDI/cSAXS_project/analysis2/'; also supports %u to insert the scan number at a later point (e.g. '/afs/psi.ch/project/CDI/cSAXS_project/analysis2/S%.5u')
p.   io.default_mask_file = '';                             % Load detector mask defined in this file instead of the mask in the detector packages, (used only if data should be prepared) 
p.   io.default_mask_type = 'binary';                       % (used only if data should be prepared) ['binary', 'indices']. Default: 'binary' 
p.   io.file_compression = 0;                               % Reconstruction file compression for HDF5 files; 0 for no compression
p.   io.data_compression = 3;                               % Prepared data file compression for HDF5 files; 0 for no compression
p.   io.load_prep_pos = false;                              % Load positions from prepared data file and ignore positions provided by metadata

p.   io.data_descriptor = 'Graphene_abTEM';                 % Added by YJ. A short string that describe data when sending notifications 
p.   io.phone_number = '';                                  % Phone number for sending messages
p.   io.send_failed_scans_SMS = false;                      % Send message if p.queue_max_attempts is exceeded
p.   io.send_finished_recon_SMS = false;                    % Send message after the reconstruction is completed
p.   io.send_crashed_recon_SMS = false;                     % Send message if the reconstruction crashes
p.   io.SMS_sleep = 1800;                                   % Max 1 message per SMS_sleep seconds
p.   io.script_name = mfilename;                            % Added by YJ. store matlab script name

p.   artificial_data_file = 'template_artificial_data';     % Artificial data parameters, set p.src_metadata = 'artificial' to use this template

%% Reconstruction
% Initial iterate object
p.   model_object = true;                                   % Use model object, if false load it from file 
p.   model.object_type = 'rand';                            % Specify how the object shall be created; use 'rand' for a random initial guess; use 'amplitude' for an initial guess based on the prepared data
p.   initial_iterate_object_file{1} = '';                   % Use this mat-file as initial guess of object, it is possible to use wild characters and pattern filling, example: '../analysis/S%05i/wrap_*_1024x1024_1_recons*'

% Initial iterate probe
p.   model_probe = true;                                    % Use model probe, if false load it from file 
p.   model.probe_alpha_max = abTEM.semiangle_cutoff;        % Modal STEM probe's aperture size
p.   model.probe_df = abTEM.defocus;                        % Modal STEM probe's defocus
p.   model.probe_c3 = 0;                                    % Modal STEM probe's third-order spherical aberration in angstrom (optional)
p.   model.probe_c5 = 0;                                    % Modal STEM probe's fifth-order spherical aberration in angstrom (optional)
p.   model.probe_c7 = 0;                                    % Modal STEM probe's seventh-order spherical aberration in angstrom (optional)
p.   model.probe_f_a2 = 0;                                  % Modal STEM probe's twofold astigmatism in angstrom (optional)
p.   model.probe_theta_a2 = 0;                              % Modal STEM probe's twofold azimuthal orientation in radian (optional)
p.   model.probe_f_a3 = 0;                                  % Modal STEM probe's threefold astigmatism in angstrom (optional)
p.   model.probe_theta_a3 = 0;                              % Modal STEM probe's threefold azimuthal orientation in radian (optional)
p.   model.probe_f_c3 = 0;                                  % Modal STEM probe's coma in angstrom (optional)
p.   model.probe_theta_c3 = 0;                              % Modal STEM probe's coma azimuthal orientation in radian (optional)

%Use probe from this mat-file (not used if model_probe is true)
p.   initial_probe_file = initial_probe_file;
p.   probe_file_propagation = 0.0e-3;                       % Distance for propagating the probe from file in meters, = 0 to ignore
p.   normalize_init_probe = false;                          % Added by YJ. Can be used to disable normalization of initial probes
p.   crop_pad_init_probe = [150,150];

% Shared scans - Currently working only for sharing probe and object
p.   share_probe  = 0;                                      % Share probe between scans. Can be either a number/boolean or a list of numbers, specifying the probe index; e.g. [1 2 2] to share the probes between the second and third scan. 
p.   share_object = 0;                                      % Share object between scans. Can be either a number/boolean or a list of numbers, specifying the object index; e.g. [1 2 2] to share the objects between the second and third scan. 

% Modes
p.   probe_modes  = Nprobe;                                 % Number of coherent modes for probe
p.   object_modes = 1;                                      % Number of coherent modes for object

% Mode starting guess
p.   mode_start_pow = 0.02;                                 % Normalized intensity on probe modes > 1. Can be a number (all higher modes equal) or a vector
p.   mode_start = 'herm';                                   % (for probe) = 'rand', = 'herm' (Hermitian-like base), = 'hermver' (vertical modes only), = 'hermhor' (horizontal modes only)
p.   ortho_probes = true;                                   % Orthogonalize probes after each engine

%% Plot, save and analyze
p.   plot.prepared_data = false;                            % Plot prepared data
p.   plot.interval = [];                                    % Plot each interval-th iteration, does not work for c_solver code
p.   plot.log_scale = [0 0];                                % Plot on log scale for x and y
p.   plot.realaxes = true;                                  % Plots show scale in microns
p.   plot.remove_phase_ramp = false;                        % Remove phase ramp from the plotted / saved phase figures 
p.   plot.fov_box = false;                                  % Plot the scanning FOV box on the object (both phase and amplitude)
p.   plot.fov_box_color = 'r';                              % Color of the scanning FOV box
p.   plot.positions = true;                                 % Plot the scanning positions
p.   plot.mask_bool = true;                                 % Mask the noisy contour of the reconstructed object in plots
p.   plot.windowautopos = true;                             % First plotting will auto position windows
p.   plot.obj_apod = false;                                 % Apply apodization to the reconstructed object;
p.   plot.prop_obj = 0;                                     % Distance to propagate reconstructed object before plotting [m]
p.   plot.show_layers = true;                               % Show each layer in multilayer reconstruction 
p.   plot.show_layers_stack = false;                        % Show each layer in multilayer reconstruction by imagesc3D
p.   plot.object_spectrum = [];                             % Plot propagated object (FFT for conventional ptycho); if empty then default is false if verbose_level < 3 and true otherwise
p.   plot.probe_spectrum = [];                              % Plot propagated probe (FFT for conventional ptycho); if empty then default is false if verbose_level < 3 and true otherwise
p.   plot.conjugate = false;                                % Plot complex conjugate of the reconstruction 
p.   plot.horz_fact = 2.5;                                  % Scales the space that the ptycho figures take horizontally
p.   plot.FP_maskdim = 180e-6;                              % Filter the backpropagation (Fourier Ptychography)
p.   plot.calc_FSC = false;                                 % Calculate the Fourier Shell correlation for 2 scans or compare with model in case of artificial data tests 
p.   plot.show_FSC = false;                                 % Show the FSC plots, including the cropped FOV
p.   plot.residua = false;                                  % Highlight phase-residua in the image of the reconstructed phase

p.   save.external = false;                                 % Use a new Matlab session to run save final figures (saves ~6s per reconstruction). Please be aware that this might lead to an accumulation of Matlab sessions if your single reconstruction is very fast.
p.   save.store_images = false;                             % Write preview images containing the final reconstructions in [p.base_path,'analysis/online/ptycho/'] if p.use_display = 0 then the figures are opened invisible in order to create the nice layout. It writes images in analysis/online/ptycho
p.   save.store_images_intermediate = false;                % Save images to disk after each engine
p.   save.store_images_ids = 1:4;                           % Identifiers  of the figure to be stored, 1=obj. amplitude, 2=obj. phase, 3=probes, 4=errors, 5=probes spectrum, 6=object spectrum
p.   save.store_images_format = 'png';                      % Data type of the stored images jpg or png 
p.   save.store_images_dpi = 150;                           % DPI of the stored bitmap images 
p.   save.exclude = {'fmag', 'fmask', 'illum_sum'};         % Exclude variables to reduce the file size on disk
p.   save.save_reconstructions_intermediate = true;         % Save final object and probes after each engine
p.   save.save_reconstructions = false;                     % Save reconstructed object and probe when full reconstruction is finished 
p.   save.output_file = 'mat';                              % Data type of reconstruction file; 'h5' or 'mat'

%% %%%%%%%%%%%%%%%%%% initialize reconstruction parameters %%%%%%%%%%%%%%%%%%%%
% --------- GPU engines  -------------   See for more details: Odstrčil M, et al., Optics express. 2018 Feb 5;26(3):3108-23.

eng = struct();                                             % Reset settings for this engine
eng. name = 'GPU_MS';                                       % Changed from GPU to GPU_MS for multislice recon    
eng. use_gpu = true;                                        % If false, run CPU code, but it will get very slow 
eng. keep_on_gpu = true;                                    % Keep data + projections on GPU, false is useful for large data if DM is used
eng. compress_data = false;                                 % Use automatic online memory compression to limit need of GPU memory
eng. gpu_id = gpu_id;                                       % Default GPU id, [] means choosen by matlab
eng. check_gpu_load = true;                                 % Check available GPU memory before starting GPU engines 

% general
eng. number_iterations = 20;                                % Number of iterations for selected method 
eng. asize_presolve = [200,200];                            % Crop data to "asize_presolve" size to get low resolution estimate that can be used in the next engine as a good initial guess 
eng. align_shared_objects = false;                          % Before merging multiple unshared objects into one shared, the object will be aligned and the probes shifted by the same distance -> use for alignement and shared reconstruction of drifting scans  

eng. method = 'MLs';                                        % Choose GPU solver: DM, ePIE, hPIE, MLc, MLs, -- recommended are MLc and MLs
eng. opt_errmetric = 'L1';                                  % Optimization likelihood - poisson, L1
eng. grouping = grouping;                                   % Size of processed blocks, larger blocks need more memory but they use GPU more effeciently, !!! grouping == inf means use as large as possible to fit into memory 
                                                            % * for hPIE, ePIE, MLs methods smaller blocks lead to faster convergence, 
                                                            % * for MLc the convergence is similar 
                                                            % * for DM is has no effect on convergence
eng. probe_modes  = p.probe_modes;                          % Number of coherent modes for probe
eng. object_change_start = 1;                               % Start updating object at this iteration number
eng. probe_change_start = 5;                                % Start updating probe at this iteration number

% regularizations
eng. reg_mu = 0;                        % Regularization (smoothing) constant ( reg_mu = 0 for no regularization)
eng. delta = 0;                         % Press values to zero out of the illumination area in the object, usually 1e-2 is enough 
eng. positivity_constraint_object = 0;  % Enforce weak (relaxed) positivity in object, ie O = O*(1-a)+a*|O|, usually a=1e-2 is already enough. Useful in conbination with OPRP or probe_fourier_shift_search  

eng. apply_multimodal_update = false;   % Apply all incoherent modes to object, it can cause issues if the modes collect some crap 
eng. probe_backpropagate = 50;          % Backpropagation distance the probe mask, 0 == apply in the object plane. Useful for pinhole imaging where the support can be applied  at the pinhole plane
eng. probe_support_radius = [];         % Normalized radius of circular support, = 1 for radius touching the window    
eng. probe_support_fft = false;         % Assume that there is not illumination intensity out of the central FZP cone and enforce this contraint. Useful for imaging with focusing optics. Helps to remove issues from the gaps between detector modules.

% basic recontruction parameters 
% PIE / ML methods                      % See for more details: Odstrčil M, et al., Optics express. 2018 Feb 5;26(3):3108-23.
eng. beta_object = 0.5;                 % Object step size, larger == faster convergence, smaller == more robust, should not exceed 1
eng. beta_probe = 0.5;                  % Probe step size, larger == faster convergence, smaller == more robust, should not exceed 1
eng. delta_p = 0;                       % LSQ dumping constant, 0 == no preconditioner, 0.1 is usually safe, Preconditioner accelerates convergence and ML methods become approximations of the second order solvers 
eng. momentum = 0;                      % Add momentum acceleration term to the MLc method, useful if the probe guess is very poor or for acceleration of multilayer solver, but it is quite computationally expensive to be used in conventional ptycho without any refinement. 
                                        % The momentum method works usually well even with the accelerated_gradients option.  eng.momentum = multiplication gain for velocity, eng.momentum == 0 -> no acceleration, eng.momentum == 0.5 is a good value
                                        % Momentum is enabled only when par.Niter < par.accelerated_gradients_start;
eng. accelerated_gradients_start = 40;  % Iteration number from which the Nesterov gradient acceleration should be applied, this option is supported only for MLc method. It is very computationally cheap way of convergence acceleration. 

% (Initial) convolution kernel
eng. convolution_kernel = zeros(3,3,1);
eng. convolution_kernel(:,:,1) = [0.0113,0.0838,0.0113; 0.0838,0.6193,0.0838; 0.0113,0.0838, 0.0113]; % gaussian kernel with sigma = 0.25

% DM
eng. pfft_relaxation = 0.05;            % Relaxation in the Fourier domain projection, = 0  for full projection 
eng. probe_regularization = 0.1;        % Weight factor for the probe update (inertia)

% ADVANCED OPTIONS                     See for more details: Odstrčil M, et al., Optics express. 2018 Feb 5;26(3):3108-23.
% position refinement 
eng. apply_subpix_shift = true;                                             % Apply FFT-based subpixel shift, it is automatically allowed for position refinement
eng. probe_position_search = 15;                                            % Iteration number from which the engine will reconstruct probe positions, from iteration == probe_position_search, assume they have to match geometry model with error less than probe_position_error_max
eng. probe_geometry_model = {'scale', 'asymmetry', 'rotation', 'shear'};    % List of free parameters in the geometry model, choose from: {'scale', 'asymmetry', 'rotation', 'shear'}
eng. probe_position_error_max = inf;                                        % Maximal expected random position errors, probe prositions are confined in a circle with radius defined by probe_position_error_max and with center defined by original positions scaled by probe_geometry_model
eng. apply_relaxed_position_constraint = true;                              % Added by YJ. Apply a relaxed constraint to probe positions. default = true. Set to false if there are big jumps in positions.
eng. update_pos_weight_every = inf;                                         % Added by YJ. Allow position weight to be updated multiple times. default = inf: only update once.

% multilayer extension 
eng. delta_z = ones(Nlayers,1)*delta_z;         % If not empty, use multilayer ptycho extension , see ML_MS code for example of use, [] == common single layer ptychography , note that delta_z provides only relative propagation distance from the previous layer, ie delta_z can be either positive or negative. If preshift_ML_probe == false, the first layer is defined by position of initial probe plane. It is useful to use eng.momentum for convergence acceleration 
eng. regularize_layers = 0.1;                   % Multilayer extension: 0<R<<1 -> apply regularization on the reconstructed object layers, 0 == no regularization, 0.01 == weak regularization that will slowly symmetrize information content between layers 
eng. preshift_ML_probe = false;                 % Multilayer extension: if true, assume that the provided probe is reconstructed in center of the sample and the layers are centered around this position 
eng. layer4pos = [];                            % Added by ZC. speficy which layer is used for position correction ; if empty, then default, ceil(Nlayers/2)
eng. init_layer_select = [];                    % Added by YJ. Select layers in the initial object for pre-processing. If empty (default): use all layers.
eng. init_layer_preprocess = '';                % Added by YJ. Specify how to pre-process initial layers
                                                % '' or 'all' (default): use all layers (do nothing)
                                                % 'avg': average all layers 
                                                % 'interp': interpolate layers using spline method. Need to specify desired depths in init_layer_interp
eng. init_layer_interp = [];                    % Specify desired depths for interpolation. The depths of initial are [1:Nlayer_init]. If empty (default), no interpolation                 
eng. init_layer_append_mode = '';               % Added by YJ. Specify how to initialize extra layers
                                                % '' or 'vac' (default): add vacuum layers
                                                % 'edge': append 1st or last layers
                                                % 'avg': append averaged layer
eng. init_layer_scaling_factor = 1;             % Added by YJ. Scale all layers. Default: 1 (no scaling). Useful when delta_z is changed

% other extensions 
eng. background = 0;                            % Average background scattering level, for OMNI values around 0.3 for 100ms, for flOMNI <0.1 per 100ms exposure, see for more details: Odstrcil, M., et al., Optics letters 40.23 (2015): 5574-5577.
eng. background_width = inf;                    % Width of the background function in pixels,  inf == flat background, background function is then convolved with the average diffraction pattern in order to account for beam diversion 
eng. clean_residua = false;                     % Remove phase residua from reconstruction by iterative unwrapping, it will result in low spatial freq. artefacts -> object can be used as an residua-free initial guess for next engine

% wavefront & camera geometry refinement        See for more details: Odstrčil M, et al., Optics express. 2018 Feb 5;26(3):3108-23.
eng. probe_fourier_shift_search = 15;           % Iteration number from which the engine will: refine farfield position of the beam (ie angle) from iteration == probe_fourier_shift_search
eng. estimate_NF_distance = inf;                % Iteration number from which the engine will: try to estimate the nearfield propagation distance using gradient descent optimization  
eng. detector_rotation_search = inf;            % Iteration number from which the engine will: search for optimal detector rotation, preferably use with option mirror_scan = true , rotation of the detector axis with respect to the sample axis, similar as rotation option in the position refinement geometry model but works also for 0/180deg rotation shared scans 
eng. detector_scale_search = inf;               % Iteration number from which the engine will: refine pixel scale of the detector, can be used to refine propagation distance in ptycho 
eng. variable_probe = false;                    % Use SVD to account for variable illumination during a single (coupled) scan, see for more details:  Odstrcil, M. et al. Optics express 24.8 (2016): 8360-8369.
eng. variable_probe_modes = 1;                  % OPRP settings , number of SVD modes using to describe the probe evolution. 
eng. variable_probe_smooth = 0;                 % OPRP settings , enforce of smooth evolution of the OPRP modes -> N is order of polynomial fit used for smoothing, 0 == do not apply any smoothing. Smoothing is useful if only a smooth drift is assumed during the ptycho acquisition 
eng. variable_intensity = false;                % Account to changes in probe intensity

% extra analysis
eng. get_fsc_score = false;                     % Measure evolution of the Fourier ring correlation during convergence 
eng. mirror_objects = false;                    % Mirror objects, useful for 0/180deg scan sharing -> geometry refinement for tomography, works only if 2 scans are provided 

% custom data adjustments, useful for offaxis ptychography
eng.auto_center_data = false;                   % Autoestimate the center of mass from data and shift the diffraction patterns so that the average center of mass corresponds to center of mass of the provided probe 
eng.auto_center_probe = false;                  % Center the probe position in real space before reconstruction is started 
eng.custom_data_flip = [0,0,0];                 % Apply custom flip of the data [fliplr, flipud, transpose]  - can be used for quick testing of reconstruction with various flips or for reflection ptychography 
eng.apply_tilted_plane_correction = '';         % If any(p.sample_rotation_angles([1,2]) ~= 0),  this option will apply tilted plane correction. (a) 'diffraction' apply correction into the data, note that it is valid only for "low NA" illumination  Gardner, D. et al., Optics express 20.17 (2012): 19050-19059. (b) 'propagation' - use tilted plane propagation, (c) '' - will not apply any correction 

% I/O
eng.plot_results_every = Niter_plot_results;
eng.save_results_every = Niter_save_results;
eng.save_images = {'obj_ph_stack','probe_mag','probe'};
eng.extraPrintInfo = '';

% ##########################################################
% Settings for in-situ/ post-processing algorithms
% ##########################################################

% Deconvolution engine
p. deconvolve = true;                    % Apply deconvolution
p. deconvolve_object = true;             % Apply deconvolution to the object
p. deconvolve_probe = false;             % Apply deconvolution to the probe (likely to fail convergence when using multiple probe modes)
p. fw_propagation_convolution = false;   % Include a final convolution in the forward propagation
p. fw_propagation_deconvolution = true;  % Include a final deconvolution in the forward propagation
p. bw_propagation_convolution = true;    % Include a initial convolution in the backward propagation with the defined convolution kernel
p. bw_propagation_deconvolution = false; % Include a initial deconvolution in the backward propagation with the defined convolution kernel
p. update_mask = false;                  % Estimate and apply a better probe mask to counter convolution noise. Mask shape depends on estimated convolution kernel but often looks like a donut. Only works in combination with p. deconvolve = true
p. mask_threshold_low = 0.3;             % Mask components of the probe that are below this threshold
p. mask_threshold_high = 0.992;          % Mask components of the probe that are above this threshold
p. deconvolve_iter_start = 5;            % Iteration to start with deconvolution. Also defines frequence of application
p. deconv_final_iter = 30;               % At which iteration to stop applying deconvolution
p. deconv_weight_object = 1;             % Update weight between current and deconvolved object. 0 --> do not use deconvolved object | 1 --> completely use deconvolved object
p. deconv_weight_probe = 0;              % Update weight between current and deconvolved probe. 0 --> do not use deconvolved probe | 1 --> completely use deconvolved probe
p. multislice_deconvolution = false;     % Apply deconvolution for each slice separetly
p. kernel_type = 'gaussian';             % Which kernel type to use: 'arbitrary', 'gaussian', 'gaussian_asym', 'horizontal', 'vertical', 'diagonal'
p. output_kernel = 'real';               % Space of returned convolution  kernel, either 'real' or 'fourier'
p. kernel_size = 3;                      % Size of convolution kernel. Odd length prefered.
p. kernel_selection = 'optimization';    % Selcetion method for optimal kernel, either 'optimization' or 'choose_best'. 'optimization' is recommended
p. kernel_params = 0.35;                 % Initial kernel parameters. check engines.debluring for required parameters
p. deconvlucy_iters = 15;                % Iterations for Richardson-Lucy deconvolution, see documentation of deconvlucy
p. target_sparsity = 0.7;                % Rel. sparsification target for kernel_selection = "optimization"
p. kernel_residual_style = false;        % Estimate the kernel as identity + residual
p. smooth_kernel = false;                % Apply smoothing to the kernel
p. smooth_kernel_width = 2;              % Smoothing width
p. SNRt = 0.1;                           % Estimate signal-to-noise ratio in object (usually way higher in the beginning than in diffration patterns)
p. damping_threshold = 15;               % damping threshold, see documentation of deconvlucy

% Settings for FSC. Only needed for kernel_selection 'choose_best'
p. correlation_threshold = 0.2;          % Correlation threshold for FSC
p. thickring = 3;                        % Thick ring in Fourier domain
p. auto_binning = true;                  % Bin FRC before calculating rings, it makes calculations faster 
p. max_rings = 200;                      % Maximal number of rings if autobinning is used 
p. freq_thr = 0.05;                      % Frequency threshold for FSC
p. FSC_evals = 1000;                     % Maximum number of FSC evals
p. fminsearch_evals = 1000;              % Maximum number of fmincon evals
p. resolution_tol = 0.5e-4;              % Tolerance for fmincon

% Gamma correction
p. adjust_gamma = false;                 % Apply gamma adjustment
p. adjust_gamma_start = 10;              % Start-iteration for gamma adjustment
p. gamma = 1.5;                          % Exponent of gamma adjustment. gamma > 1 --> high-pass filter behaviour  | gamma < 1 --> low-pass filter behaviour

% potential flipping
p. potential_flipping = false;           % Apply potential fliping to the complex object
p. flip_iterations = [10,11];            % Flip the potential after these iterations

resultDir = strcat(p.base_path,sprintf(p.scan.format, p.scan_number),'/roi',p.scan.roi_label,'/');
[eng.fout, p.suffix] = generateResultDir(eng, resultDir, extraInfo_dir);

%add engine
[p, ~] = core.append_engine(p, eng);     % Adds this engine to the reconstruction process

%% refined reconstruction

eng. method = 'MLs';
eng. number_iterations = 30;             % number of iterations for selected method 
eng. asize_presolve = [272,272];         % crop data to "asize_presolve" size to get low resolution estimate that can be used in the next engine as a good initial guess 
eng. grouping = 16;                      % size of processed blocks, larger blocks need more memory but they use GPU more effeciently, !!! grouping == inf means use as large as possible to fit into memory 
                                         % * for hPIE, ePIE, MLs methods smaller blocks lead to faster convergence, 
                                         % * for MLc the convergence is similar 
                                         % * for DM is has no effect on convergence
eng. probe_change_start = Inf;           % Start updating probe at this iteration number
eng. probe_position_search = Inf;        % iteration number from which the engine will reconstruct probe positions, from iteration == probe_position_search, assume they have to match geometry model with error less than probe_position_error_max
eng. apply_multimodal_update = true;
eng. clean_residua = false;
eng. regularize_layers = 0;
eng. reg_mu = 0;
eng. beta_object = 0.3;                  % Object step size, larger == faster convergence, smaller == more robust, should not exceed 1
eng. beta_probe = 0.3;                   % Probe step size, larger == faster convergence, smaller == more robust, should not exceed 1
eng. delta_p = 0;                        % LSQ dumping constant, 0 == no preconditioner, 0.1 is usually safe, Preconditioner accelerates convergence and ML methods become approximations of the second order solvers 
eng. momentum = 0;                       % Add momentum acceleration term to the MLc method, useful if the probe guess is very poor or for acceleration of multilayer solver, but it is quite computationally expensive to be used in conventional ptycho without any refinement. 
eng. accelerated_gradients_start = inf;  % Iteration number from which the Nesterov gradient acceleration should be applied, this option is supported only for MLc method. It is very computationally cheap way of convergence acceleration. 

[eng.fout, p.suffix] = generateResultDir(eng, resultDir, extraInfo_dir);

%add engine
[p, ~] = core.append_engine(p, eng);     % Adds this engine to the reconstruction process

%% Run the reconstruction

tic
out = core.ptycho_recons(p);
toc